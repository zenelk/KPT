file_length:
  warning: 750
  error: 750
function_body_length:
  warning: 150
  error: 150
identifier_name:
  min_length: 2
  max_length: 48
line_length:
  warning: 100
  error: 100
nesting:
  type_level: 2
type_body_length:
  warning: 450
  error: 450
type_name:
  max_length: 50
  excluded:
    - T

opt_in_rules:
  - anyobject_protocol # Prefer using AnyObject over class for class-only protocols.
  - array_init # Prefer using Array(seq) over seq.map { $0 } to convert a sequence into an Array.
  - attributes # Attributes should be on their own lines in functions and types, but on the same line as variables and imports.
  - closure_body_length # Closure bodies should not span too many lines.
  - closure_spacing # Closure expressions should have a single space inside each brace.
  - collection_alignment # All elements in a collection literal should be vertically aligned.
  - contains_over_first_not_nil # Prefer contains over first(where:) != nil.
  - convenience_type # Types used for hosting only static members should be implemented as a caseless enum to avoid instantiation.
  - discouraged_object_literal # Prefer initializers over object literals.
  - empty_count # Prefer checking isEmpty over comparing count to zero.
  - empty_string # Prefer checking isEmpty over comparing string to an empty string literal.
  - empty_xctest_method # Empty XCTest method should be avoided.
  - explicit_init # Explicitly calling .init() should be avoided.
  - fallthrough # Fallthrough should be avoided.
  - fatal_error_message # A fatalError call should have a message.
  - first_where # Prefer using .first(where:) over .filter { }.first in collections.
  - force_unwrapping # Force unwrapping should be avoided.
  - function_default_parameter_at_end # Prefer to locate parameters with defaults toward the end of the parameter list.
  - identical_operands # Comparing two identical operands is likely a mistake.
  - implicit_return # Prefer implicit returns in closures.
  - joined_default_parameter # Discouraged explicit usage of the default separator.
  - legacy_random # Prefer using type.random(in:) over legacy functions.
  - let_var_whitespace # Let and var should be separated from other statements by a blank line.
  - lower_acl_than_parent # Ensure definitions have a lower access control level than their enclosing parent
  - modifier_order # Modifier order should be consistent.
  - multiline_arguments # Arguments should be either on the same line, or one per line.
  - multiline_parameters # Functions and methods parameters should be either on the same line, or one per line.
  - number_separator # Underscores should be used as thousand separator in large decimal numbers.
  - operator_usage_whitespace # Operators should be surrounded by a single whitespace when they are being used.
  - overridden_super_call # Some overridden methods should always call super
  - override_in_extension # Extensions shouldn't override declarations.
  - pattern_matching_keywords # Combine multiple pattern matching bindings by moving keywords out of tuples.
  - private_action # IBActions should be private.
  - private_outlet # IBOutlets should be private.
  - private_over_fileprivate # Prefer private over fileprivate declarations.
  - prohibited_super_call # Some methods should not call super
  - redundant_nil_coalescing # nil coalescing operator is only evaluated if the lhs is nil, coalescing operator with nil as rhs is redundant.
  - required_enum_case # Enums conforming to a specified protocol must implement a specific case(s).
  - single_test_class # Test files should contain a single QuickSpec or XCTestCase class.
  - sorted_first_last # Prefer using min() or max() over sorted().first or sorted().last.
  - sorted_imports # Imports should be sorted.
  - static_operator # Operators should be declared as static functions, not free functions.
  - switch_case_on_newline # Cases inside a switch should always be on a newline.
  - toggle_bool # Prefer someBool.toggle() over someBool = !someBool.
  - trailing_closure # Trailing closure syntax should be used whenever possible.
  - unavailable_function # Unimplemented functions should be marked as unavailable.
  - unneeded_parentheses_in_closure_argument # Parentheses are not needed when declaring closure arguments.
  - unused_import # All imported modules should be required to make the file compile.
  - unused_declaration # Declarations should be referenced at least once.
  - vertical_parameter_alignment_on_call # Function parameters should be aligned vertically if they're in multiple lines in a method call.
  - yoda_condition # The variable should be placed on the left, the constant on the right of a comparison operator.
